[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
" jellybeans, wombat, molokai
let g:lightline = {
  \ 'colorscheme': 'molokai',
  \ 'active': {
  \   'left': [
  \     ['mode', 'paste'],
  \     ['readonly', 'filename', 'modified', 'method'],
  \   ]
  \ },
  \ 'component_function': {
  \   'method': 'NearestMethodOrFunction'
  \ },
  \ }
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
nnoremap <Leader><C-e> :NERDTreeToggle<CR>
nnoremap <Leader>ff    :NERDTreeToggle<CR>
map <C-\> :NERDTreeFind<CR>
'''

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
call submode#enter_with('winsize', 'n', '', 's>', '<C-w>>')
call submode#enter_with('winsize', 'n', '', 's<', '<C-w><')
call submode#enter_with('winsize', 'n', '', 's+', '<C-w>+')
call submode#enter_with('winsize', 'n', '', 's-', '<C-w>-')
call submode#map('winsize', 'n', '', '>', '<C-w>>')
call submode#map('winsize', 'n', '', '<', '<C-w><')
call submode#map('winsize', 'n', '', '+', '<C-w>+')
call submode#map('winsize', 'n', '', '-', '<C-w>-')

call submode#enter_with('movetab', 'n', '', 'tn', ':tabnext<CR>')
call submode#enter_with('movetab', 'n', '', 'tp', ':tabprevious<CR>')
call submode#map('movetab', 'n', '', 'n', ':tabnext<CR>')
call submode#map('movetab', 'n', '', 'p', ':tabprevious<CR>')

call submode#enter_with('localmove', 'n', '', '<C-l>f', ':lfirst<CR>')
call submode#enter_with('localmove', 'n', '', '<C-l>l', ':llast<CR>')
call submode#enter_with('localmove', 'n', '', '<C-l>j', ':lnext<CR>')
call submode#enter_with('localmove', 'n', '', '<C-l>k', ':lprevious<CR>')
call submode#map('localmove', 'n', '', 'j', ':lnext<CR>')
call submode#map('localmove', 'n', '', 'k', ':lprevious<CR>')

call submode#enter_with('quickmove', 'n', '', '<C-c>j', ':cnext<CR>')
call submode#enter_with('quickmove', 'n', '', '<C-c>k', ':cprevious<CR>')
call submode#map('quickmove', 'n', '', 'j', ':cnext<CR>')
call submode#map('quickmove', 'n', '', 'k', ':cprevious<CR>')
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup = 1
'''
[[plugins]]
repo = 'Shougo/context_filetype.vim'
[[plugins]]
repo = 'osyo-manga/vim-precious'
depents = ['Shougo/context_filetype.vim']

[[plugins]]
repo = 'jacquesbh/vim-showmarks'
hook_add = '''
aug show-marks-sync
  au!
  au BufReadPost * sil! DoShowMarks
aug END

nnoremap [Mark] <Nop>
nmap     m [Mark]

if !exists('g:markrement_char')
  let g:markrement_char = [
    \   'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
    \   'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'
    \ ]
endif
nnoremap <silent>[Mark]m :<C-u>call <SID>AutoMarkrement()<CR>:DoShowMarks<CR>
function! s:AutoMarkrement()
  if !exists('b:markrement_pos')
    let b:markrement_pos = 0
  else
    let b:markrement_pos = (b:markrement_pos + 1) % len(g:markrement_char)
  endif
  execute 'mark' g:markrement_char[b:markrement_pos]
  echo 'marked' g:markrement_char[b:markrement_pos]
endfunction
command! -nargs=? SetNextMarkChar call s:set_next_mark_char(<f-args>)
function! s:set_next_mark_char(...)
  if a:0 >= 1
    let b:markrement_pos=index(g:markrement_char,a:1)-1
  else
    echo "Next:".g:markrement_char[b:markrement_pos+1]
  end
endfunction
for m in g:markrement_char
  execute 'nnoremap [Mark]s'.m ':SetNextMarkChar '.m.'<CR>'
  execute 'nnoremap [Mark]f'.m ':SetNextMarkChar '.m.'<CR>:<C-u>call <SID>AutoMarkrement()<CR>:DoShowMarks<CR>'
endfor

nnoremap [Mark]n ]`
nnoremap [Mark]p [`
" show mark list
nnoremap [Mark]l :<C-u>PreviewMarks<CR>
" delete all marks
command! -bar MarksDelete sil :delm! | :delm 0-9A-Z | :wv! | :DoShowMarks
nnoremap <silent>[Mark]d :MarksDelete<CR>
'''

[[plugins]]
repo = 'vim-scripts/errormarker.vim'
hook_add = '''
let &errorformat="%f:%l:%c: %t%*[^:]:%m,%f:%l: %t%*[^:]:%m," . &errorformat
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
let g:deoplete#enable_at_startup = 1
'''

[[plugins]]
repo = 'roxma/nvim-yarp'
on_if = ''' !has('nvim') '''
hook_add = '''
let g:python3_host_prog = 'python3.7'
'''

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_if = ''' !has('nvim') '''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = [ 'Shougo/deoplete.nvim' ]
hook_add = '''
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

imap <expr><TAB>
 \ pumvisible() ? "\<C-n>" :
 \ neosnippet#expandable_or_jumpable() ?
 \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
set completeopt+=preview
let g:neosnippet#snippets_directory = '~/dotfiles/vim/snippets'
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'


[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
call denite#custom#map('insert', '<Down>', '<denite:move_to_next_line>', 'noremap')
call denite#custom#map('insert', '<Up>', '<denite:move_to_previous_line>', 'noremap')

" Define mappings
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
endfunction

nnoremap <silent> <C-u>f :<C-u>DeniteBufferDir file_rec<CR>
nnoremap <silent> <C-u>F :<C-u>Denite file_rec<CR>
nnoremap <silent> <C-u>b :<C-u>Denite buffer<CR>
nnoremap <silent> <C-u>w :<C-u>Denite line<CR>
nnoremap <silent> <C-u>c :<C-u>DeniteCursorWord line<CR>
nnoremap <silent> <C-u>gr :<C-u>Denite grep<CR>
nnoremap <silent> <C-u>gg :<C-u>DeniteBufferDir grep<CR>
nnoremap <silent> <C-u>l :<C-u>DeniteCursorWord grep<CR>
'''

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'mattn/sonictemplate-vim'
depends = [ 'Shougo/unite.vim', 'Shougo/denite.nvim' ]
hook_add = '''
nnoremap <silent> <C-u>t :call fzf#sonictemplate#run()<CR>
let g:sonictemplate_vim_template_dir = [
      \ '$HOME/dotfiles/vim/template',
      \]
'''

[[plugins]]
repo = 'Shougo/unite-outline'
depends = [ 'Shougo/unite.vim', 'Shougo/denite.nvim' ]
hook_add = '''
nnoremap <silent> <C-u>o :<C-u>Denite unite:outline<CR>
'''

[[plugins]]
repo = 'kmnk/vim-unite-giti'
depends = ['Shougo/denite.nvim']
hook_add = '''
nnoremap <silent> <C-u>gs <C-u>:Denite unite:giti/status<CR>
nnoremap <silent> <C-u>gb <C-u>:Denite unite:giti/branch<CR>
nnoremap <silent> <C-u>gl <C-u>:Denite unite:giti/log<CR>
'''

[[plugins]]
repo = 'junegunn/fzf'
dir = '~/.fzf'
build = './install --all'
[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
command! FZFFileList call fzf#run(fzf#wrap({
      \ 'source': 'find . -type d -name .git -prune -o ! -name .DS_Store',
      \ 'down': '40%'}))
'''

[[plugins]]
repo = 'prabirshrestha/async.vim'
[[plugins]]
repo =  'prabirshrestha/asyncomplete.vim'
[[plugins]]
repo =  'prabirshrestha/asyncomplete-lsp.vim'
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
[[plugins]]
repo = 'mattn/vim-lsp-settings'
[[plugins]]
repo = 'liuchengxu/vista.vim'
hook_add = '''
let g:vista_executive_for = {
      \ 'cpp':    'vim_lsp',
      \ 'php':    'vim_lsp',
      \ 'go':     'vim_lsp',
      \ 'elixir': 'vim_lsp',
      \ }

function! NearestMethodOrFunction() abort
  return get(b:, 'vista_nearest_method_or_function', '')
endfunction
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
nmap <silent> <C-n> <Plug>(ale_toggle)
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
nmap <silent> <C-l> <Plug>(ale_first)
nmap <silent> <C-h> <Plug>(ale_last)

let g:ale_enabled = 1
let g:ale_lint_on_save = 0
let g:ale_fix_on_save = 0
let g:ale_sign_column_always = 1
let g:ale_sign_error   = '>>'
let g:ale_sign_warning = '->'
let g:ale_echo_msg_error_str   = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%]%code%: %s [%severity%]'
let g:ale_open_list = 1
let g:ale_set_quickfix = 0
let g:ale_linters = {
      \ 'go': ['golint'],
      \ 'python': ['flake8', 'mypy', 'pylint'],
      \ 'elixir': ['mix_format'],
      \ }
let g:ale_fixers = {
      \ 'go': ['goimports'],
      \ 'python': ['autopep8', 'black', 'isort'],
      \ 'elixir': ['mix_format'],
      \ }
" let g:ale_go_gometalinter_options = '--fast --enable=staticcheck --enable=gosimple --enable=unused'
'''

[[plugins]]
repo = 'soramugi/auto-ctags.vim'
hook_add = '''
let g:auto_ctags = 0
let g:auto_ctags_directory_list = ['.git','.svn','.']
let g:auto_ctags_tags_args = '--tag-relative=yes --recurse --sort=yes --languages=-JSON'
'''

[[plugins]]
repo = 'tpope/vim-dispatch'
[[plugins]]
repo = 'janko-m/vim-test'
depends = ['vim-dispatch']
hook_add = '''
let g:test#strategy = 'dispatch'
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build= 'make'
[[plugins]]
repo = 'Shougo/vimshell.vim'
depends = [ 'Shougo/vimproc.vim' ]

# For specific languages

[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
let g:polyglot_disabled = ['go', 'rust', 'python', 'python-compiler', 'python-ident', 'markdown', 'typescript' ]

let g:rustfmt_autosave = 1
let g:rustfmt_command = '$HOME/.cargo/bin/rustfmt'
'''

[[plugins]]
repo = 'slashmili/alchemist.vim'
[[plugins]]
repo = 'mattreduce/vim-mix'

[[plugins]]
repo = 'mattn/vim-goimports'
# [[plugins]]
# repo = 'fatih/vim-go'
# hook_add = '''
# let g:go_def_mapping_enabled = 0
# let g:go_template_autocreate = 0
# let g:go_auto_sameids = 0   " too heavy
# let g:go_auto_type_info = 0 " too heavy
# let g:go_info_mode = 'gopls'
# let g:go_updatetime = 200
# 
# let g:go_doc_keywordprg_enabled = 0 "change K(keywordprg) to :GoDoc
# let g:go_doc_max_height = 20
# let g:go_autodetect_gopath = 0 " 迷ってる, _vendor, vendor共に対応できるか検証してから
# let g:go_list_type = "quickfix"
# let g:go_fmt_autosave = 0
# let g:go_fmt_command= "goimports"
# let g:go_metalinter_autosave = 0
# let g:go_addtags_transform = 'snakecase'
# let g:go_textobj_enabled = 0
# let g:go_textobj_include_function_doc = 0
# '''

[[plugins]]
repo = 'racer-rust/vim-racer'
hook_add = '''
set hidden
let g:racer_cmd = '$HOME/.cargo/bin/racer'
let g:racer_experimental_completer = 1
'''

[[plugins]]
repo = 'leafgarland/typescript-vim'

[[plugins]]
repo = 'mattn/emmet-vim'
[[plugins]]
repo = 'robertbasic/vim-hugo-helper'

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
'''
[[plugins]]
repo = 'godlygeek/tabular'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
nnoremap <silent> <Leader>gf   :Gfetch<CR>
nnoremap <silent> <Leader>diff :Gdiff<CR>
'''

[[plugins]]
repo = 'vim-utils/vim-man'
hook_add = '''
augroup cursor_man
  autocmd!
  autocmd WinEnter,BufRead,FileType * if &filetype == 'man' | IndentGuidesDisable | else | IndentGuidesEnable | endif
augroup END
'''

[[plugins]]
repo = 'mhinz/vim-rfc'

[[plugins]]
repo = 'thinca/vim-ref'

[[plugins]]
repo = 'fs111/pydoc.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
depends = [ 'Shougo/deoplete.nvim' ]

