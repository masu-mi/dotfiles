[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup = 1
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depents = ['Shougo/context_filetype.vim']
[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
call denite#custom#map('insert', '<Down>', '<denite:move_to_next_line>', 'noremap')
call denite#custom#map('insert', '<Up>', '<denite:move_to_previous_line>', 'noremap')

nnoremap <silent> <C-u>f :<C-u>DeniteBufferDir file_rec<CR>
nnoremap <silent> <C-u>F :<C-u>Denite file_rec<CR>
nnoremap <silent> <C-u>b :<C-u>Denite buffer<CR>
nnoremap <silent> <C-u>w :<C-u>Denite line<CR>
nnoremap <silent> <C-u>c :<C-u>DeniteCursorWord line<CR>
nnoremap <silent> <C-u>gr :<C-u>Denite grep<CR>
nnoremap <silent> <C-u>gg :<C-u>DeniteBufferDir grep<CR>
nnoremap <silent> <C-u>l :<C-u>DeniteCursorWord grep<CR>
'''

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'Shougo/unite-outline'
depends = [ 'Shougo/unite.vim', 'Shougo/denite.nvim' ]
hook_add = '''
nnoremap <silent> <C-u>o :<C-u>Denite unite:outline<CR>
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'jacquesbh/vim-showmarks'
hook_add = '''
aug show-marks-sync
  au!
  au BufReadPost * sil! DoShowMarks
aug END

nnoremap [Mark] <Nop>
nmap     m [Mark]

if !exists('g:markrement_char')
  let g:markrement_char = [
    \   'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',
    \   'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'
    \ ]
endif
nnoremap <silent>[Mark]m :<C-u>call <SID>AutoMarkrement()<CR>:DoShowMarks<CR>
function! s:AutoMarkrement()
  if !exists('b:markrement_pos')
    let b:markrement_pos = 0
  else
    let b:markrement_pos = (b:markrement_pos + 1) % len(g:markrement_char)
  endif
  execute 'mark' g:markrement_char[b:markrement_pos]
  echo 'marked' g:markrement_char[b:markrement_pos]
endfunction
command! -nargs=? SetNextMarkChar call s:set_next_mark_char(<f-args>)
function! s:set_next_mark_char(...)
  if a:0 >= 1
    let b:markrement_pos=index(g:markrement_char,a:1)-1
  else
    echo "Next:".g:markrement_char[b:markrement_pos+1]
  end
endfunction
for m in g:markrement_char
  execute 'nnoremap [Mark]s'.m ':SetNextMarkChar '.m.'<CR>'
  execute 'nnoremap [Mark]f'.m ':SetNextMarkChar '.m.'<CR>:<C-u>call <SID>AutoMarkrement()<CR>:DoShowMarks<CR>'
endfor

nnoremap [Mark]n ]`
nnoremap [Mark]p [`
" show mark list
nnoremap [Mark]l :<C-u>PreviewMarks<CR>
" delete all marks
command! -bar MarksDelete sil :delm! | :delm 0-9A-Z | :wv! | :DoShowMarks
nnoremap <silent>[Mark]d :MarksDelete<CR>
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
nnoremap <silent> <Leader>gf   :Gfetch<CR>
nnoremap <silent> <Leader>diff :Gdiff<CR>
'''

[[plugins]]
repo = 'ekalinin/Dockerfile.vim'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
nnoremap <Leader><C-e> :NERDTreeToggle<CR>
nnoremap <Leader>ff    :NERDTreeToggle<CR>
map <C-\> :NERDTreeFind<CR>
'''

[[plugins]]
repo = 'kmnk/vim-unite-giti'
depends = ['Shougo/denite.nvim']
hook_add = '''
nnoremap <silent> <C-u>gs <C-u>:Denite unite:giti/status<CR>
nnoremap <silent> <C-u>gb <C-u>:Denite unite:giti/branch<CR>
nnoremap <silent> <C-u>gl <C-u>:Denite unite:giti/log<CR>
'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
let g:tagbar_ctags_bin = '~/local/bin/ctags'
let g:tagbar_type_rust = {
    \ 'ctagstype' : 'rust',
    \ 'kinds' : [
        \'T:types,type definitions',
        \'f:functions,function definitions',
        \'g:enum,enumeration names',
        \'s:structure names',
        \'m:modules,module names',
        \'c:consts,static constants',
        \'t:traits',
        \'i:impls,trait implementations',
    \ ]
    \ }
let g:tagbar_type_elixir = {
    \ 'ctagstype' : 'elixir',
    \ 'kinds' : [
        \ 'f:functions',
        \ 'functions:functions',
        \ 'c:callbacks',
        \ 'd:delegates',
        \ 'e:exceptions',
        \ 'i:implementations',
        \ 'a:macros',
        \ 'o:operators',
        \ 'm:modules',
        \ 'p:protocols',
        \ 'r:records',
        \ 't:tests'
    \ ]
    \ }
let g:tagbar_type_xml = {
    \ 'ctagstype' : 'WSDL',
    \ 'kinds'     : [
        \ 'n:namespaces',
        \ 'm:messages',
        \ 'p:portType',
        \ 'o:operations',
        \ 'b:bindings',
        \ 's:service'
    \ ]
    \ }
'''

[[plugins]]
repo = 'soramugi/auto-ctags.vim'
hook_add = '''
let g:auto_ctags = 1
let g:auto_ctags_directory_list = ['.git','.svn','.']
let g:auto_ctags_tags_args = '--tag-relative=yes --recurse --sort=yes --languages=-JSON'
'''


[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
" jellybeans, wombat, molokai
let g:lightline = {
  \ 'colorscheme': 'jellybeans',
  \ 'active': {
  \   'left': [
  \     ['mode', 'paste'],
  \     ['readonly', 'filename', 'modified', 'ale'],
  \   ]
  \ },
  \ 'component_function': {
  \   'ale': 'ALEGetStatusLine'
  \ }
  \ }
'''

[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
call submode#map('bufmove', 'n', '', '>', '<C-w>>')
call submode#map('bufmove', 'n', '', '<', '<C-w><')
call submode#map('bufmove', 'n', '', '+', '<C-w>+')
call submode#map('bufmove', 'n', '', '-', '<C-w>-')
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
nmap <silent> <C-n> <Plug>(ale_toggle)
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
nmap <silent> <C-l> <Plug>(ale_first)
nmap <silent> <C-h> <Plug>(ale_last)

let g:ale_enabled = 0
let g:ale_lint_on_save = 1
let g:ale_sign_column_always = 1
let g:ale_sign_error   = '✗'
let g:ale_sign_warning = '⚠'
let g:ale_statusline_format = ['✗ %d', '⚠ %d', '⬥ ok']
let g:ale_echo_msg_error_str   = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_open_list = 1
let g:ale_set_quickfix = 0

let g:ale_linters = {
      \ 'go': ['gofmt', 'goimports', 'golint', 'go vet', 'gometalinter'],
      \ 'python': ['flake8', 'mypy', 'pylint'],
      \ }
let g:ale_go_gometalinter_options = '--fast --enable=staticcheck --enable=gosimple --enable=unused'
'''

# [[plugins]]
# repo = 'Shougo/neosnippet-snippets'

# [[plugins]]
# repo = 'Shougo/neosnippet'
# hook_add = '''
# imap <C-k> <Plug>(neosnippet_expand_or_jump)
# smap <C-k> <Plug>(neosnippet_expand_or_jump)
# xmap <C-k> <Plug>(neosnippet_expand_target)
# if has('conceal')
#   set conceallevel=2 concealcursor=niv
# endif
# '''
# depends = [ 'neosnippet-snippets' ]

[[plugins]]
repo = 'Shougo/vimproc.vim'
build= 'make'
[[plugins]]
repo = 'Shougo/vimshell.vim'
depends = [ 'Shougo/vimproc.vim' ]

[[plugins]]
repo = 'fatih/vim-go'
# on_ft = ['go']
hook_add = '''
let g:go_def_mapping_enabled = 0
let g:go_template_autocreate = 1
let g:go_template_file = "hello_world.go"

let g:go_auto_sameids = 0   " too heavy
let g:go_auto_type_info = 0 " too heavy
let g:go_info_mode = 'gocode'
let g:go_updatetime = 200

let g:go_doc_keywordprg_enabled = 1 "change K(keywordprg) to :GoDoc
let g:go_doc_max_height = 20
let g:go_autodetect_gopath = 1 " 迷ってる, _vendor, vendor共に対応できるか検証してから

let g:go_list_type = "quickfix"
let g:go_fmt_autosave = 1
let g:go_fmt_command = 'goimports'
let g:go_metalinter_autosave = 0

let g:go_addtags_transform = 'snakecase'
" let g:go_snippet_engine = "neosnippet"

let g:go_textobj_enabled = 1
let g:go_textobj_include_function_doc = 1
'''

[[plugins]]
repo = 'dgryski/vim-godef'
on_ft = ['go']
hook_source = '''
let g:godef_split=1
let g:godef_same_file_in_same_window=0
'''

[[plugins]]
repo = 'mattn/sonictemplate-vim'
depends = [ 'Shougo/unite.vim', 'Shougo/denite.nvim' ]
hook_add = '''
nnoremap <silent> <C-u>t :<C-u>Denite unite:sonictemplate<CR>
let g:sonictemplate_vim_template_dir = [
      \ '$HOME/.vim/template',
      \]
'''

# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# hook_add = '''
# let g:deoplete#enable_at_startup = 1
# imap <expr><tab> pumvisible() ? "\<C-n>" :
#       \ neosnippet#expandable_or_jumpable() ?
#       \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
# call deoplete#custom#source('_', 'converters', ['converter_auto_paren'])
# imap <expr><CR> neosnippet#expandable() ? "\<Plug>(neosnippet_expand)" : "\<CR>"
# '''

[[plugins]]
repo = 'roxma/nvim-yarp'
on_if = ''' !has('nvim') '''

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_if = ''' !has('nvim') '''

[[plugins]]
repo = 'zchee/deoplete-go'
build = 'make'
depends = [ 'Shougo/deoplete.nvim' ]

[[plugins]]
repo = 'zchee/deoplete-jedi'
depends = [ 'Shougo/deoplete.nvim' ]

[[plugins]]
repo = 'fs111/pydoc.vim'

[[plugins]]
repo = 'fishbullet/deoplete-ruby'
depends = [ 'Shougo/deoplete.nvim' ]

[[plugins]]
repo = 'Shougo/neco-vim'
depends = [ 'Shougo/deoplete.nvim' ]

[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'vim-scripts/errormarker.vim'
hook_add = '''
let &errorformat="%f:%l:%c: %t%*[^:]:%m,%f:%l: %t%*[^:]:%m," . &errorformat
'''

[[plugins]]
repo = 'rust-lang/rust.vim'
hook_add = '''
let g:rustfmt_autosave = 1
let g:rustfmt_command = '$HOME/.cargo/bin/rustfmt'
'''

[[plugins]]
repo = 'racer-rust/vim-racer'
hook_add = '''
set hidden
let g:racer_cmd = '$HOME/.cargo/bin/racer'
let g:racer_experimental_completer = 1
'''

# [[plugins]]
# repo = 'sheerun/vim-polyglot'
# hook_add = '''
# let g:polyglot_disabled = ['go', 'rust', 'elixir', 'python', 'python-compiler', 'python-ident', 'markdown' ]
# '''

[[plugins]]
repo = 'robertbasic/vim-hugo-helper'

[[plugins]]
repo = 'elixir-editors/vim-elixir'

[[plugins]]
repo = 'mattreduce/vim-mix'

[[plugins]]
repo = 'godlygeek/tabular'

[[plugins]]
repo = 'plasticboy/vim-markdown'

[[plugins]]
repo = 'slashmili/alchemist.vim'

[[plugins]]
repo = 'vim-utils/vim-man'
hook_add = '''
augroup cursor_man
  autocmd!
  autocmd WinEnter,BufRead,FileType * if &filetype == 'man' | IndentGuidesDisable | else | IndentGuidesEnable | endif
augroup END
'''

[[plugins]]
repo = 'tfnico/vim-gradle'

[[plugins]]
repo = 'posva/vim-vue'

[[plugins]]
repo = 'thinca/vim-ref'
[[plugins]]
repo = 'yuku-t/vim-ref-ri'
depends = ['thinca/vim-ref']

